package com.divertsy.hid.utils;


import android.os.Environment;
import android.util.Log;
import android.text.TextUtils;

import com.divertsy.hid.BuildConfig;
import com.divertsy.hid.usb.ScaleMeasurement;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;

/**
 *  Utils for conversions and handles saving data to a local file
 */
public class Utils {

    private static final String TAG = "DIVERTSY";
    private static final String LOG_BASE_DIR = Environment.getExternalStorageDirectory().getPath() + "/Documents/";
    private static final String LOG_FILENAME = "divertsy";

    public static String getDivertsyFilePath(String office){
        return LOG_BASE_DIR + "/" + LOG_FILENAME + "-" + office + ".csv";
    }


    public static void saveCSV(String office, String text) {
        // Every device should have a /sdcard/ but not all will have "Documents"
        File logFile = new File(getDivertsyFilePath(office));
        File basedir = logFile.getParentFile();
        if (!basedir.exists()) {
            boolean result = basedir.mkdirs();
            if (!result) {
                Log.e(TAG, "Failed to make save directory");
            }
        }
        if (!logFile.exists()) {
            try {
                boolean result = logFile.createNewFile();
                if (!result) {
                    Log.e(TAG, "Failed to make CSV file");
                }
                // Write CSV file header
                String headers = TextUtils.join(",", ScaleMeasurement.csv_headers);
                FileWriter file = new FileWriter(logFile,true);
                file.write(headers + System.getProperty("line.separator"));
                file.close();

            } catch (IOException e) {
                Log.e(TAG, e.getMessage());
                e.printStackTrace();
                System.exit(-1);
            }
        }
        try {
            FileWriter file = new FileWriter(logFile,true);
            file.write(text + System.getProperty("line.separator"));
            file.close();

        } catch (Exception e) {
            Log.e(TAG, e.getMessage());
        }
    }


    public static double round(double value, int places) {
        if (places < 0) throw new IllegalArgumentException();

        BigDecimal bd = new BigDecimal(value);
        bd = bd.setScale(places, RoundingMode.HALF_UP);
        return bd.doubleValue();
    }

    public static int toInt(byte b) {
        return (int) b & 0xFF;
    }

    /**
     * The BuildNumber as generated by gradle during the build process
     *
     * @return The BuildNumber which is a timestamp
     */

    public static Integer getBuildNumber(){
        SimpleDateFormat sdf = new SimpleDateFormat("yyMMdd", Locale.US);
        return Integer.parseInt(sdf.format(BuildConfig.buildTime));
    }

    public static boolean isZeroed(byte[] bytes) {
        for (byte b : bytes) {
            if (b != 0x00) {
                return false;
            }
        }
        return true;
    }

    private static final char[] HEX = "0123456789ABCDEF".toCharArray();

    public static String toHexString(byte[] bytes) {
        if (bytes.length == 0) {
            return "";
        }
        char[] chars = new char[bytes.length * 2];
        for (int i = 0; i < bytes.length; i++) {
            int c = bytes[i] & 0xFF;
            chars[i * 2] = HEX[c >>> 4];
            chars[i * 2 + 1] = HEX[c & 0x0F];
        }
        return new String(chars).toLowerCase();
    }

}
